{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates CodePipeline, CodeBuild projects and notification system in nested stacks",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "General Settings"
          },
          "Parameters": [
            "BuildImage"
          ]
        },
        {
          "Label": {
            "default": "Unit Test settings"
          },
          "Parameters": [
            "UnitTestBuildSpecFileName",
            "UnitTestTemplateURL"
          ]
        },
        {
          "Label": {
            "default": "Verify Test settings"
          },
          "Parameters": [
            "VerifyBuildSpecFileName",
            "VerifyTestTemplateURL"
          ]
        },
        {
          "Label": {
            "default": "Coccinelle Test settings"
          },
          "Parameters": [
            "CoccinelleBuildSpecFileName",
            "CoccinelleTemplateURL",
            "CoccinelleBuildImage"
          ]
        },
        {
          "Label": {
            "default": "Rust Test settings"
          },
          "Parameters": [
            "RustBuildSpecFileName",
            "RustTemplateURL",
            "BuildImage"
          ]
        },
        {
          "Label": {
            "default": "Clang Test settings"
          },
          "Parameters": [
            "ClangBuildSpecFileName",
            "ClangTemplateURL"
          ]
        },
        {
          "Label": {
            "default": "CodePipeline settings"
          },
          "Parameters": [
            "PipelineName",
            "SourceBucket",
            "SourceBucketObjectKey",
            "PipelineTemplateURL"
          ]
        },
        {
          "Label": {
            "default": "Notification system settings"
          },
          "Parameters": [
            "token",
            "NotificationTemplateURL",
            "snsDisplayName",
            "snsTopicName"
          ]
        }
      ],
      "ParameterLabels": {
        "snsTopicName": {
          "default": "Name of SNS topic"
        },
        "snsDisplayName": {
          "default": "OPTIONAL: Display name of SNS Topic"
        },
        "token": {
          "default": "Optional: Github token or Bitbucket basic auth credentials for notification system. NOTE: If not provided, the notification system will still run, but not function"
        },
        "UnitTestBuildSpecFileName": {
          "default": "File path of the buildspec file for the unit test"
        },
        "VerifyBuildSpecFileName": {
          "default": "File path of the buildspec file for the verify tests"
        },
        "CoccinelleBuildSpecFileName": {
          "default": "File path of the buildspec file for the coccinelle tests"
        },
        "ClangBuildSpecFileName": {
          "default": "File path of the buildspec file for the Clang tests"
        },
        "RustBuildSpecFileName": {
          "default": "File path of the buildspec file for the Rust tests"
        },
        "BuildImage": {
          "default": "Address of docker image used in CodeBuild projects"
        },
        "CoccinelleBuildImage": {
          "default": "Address of docker image used for Coccinelle"
        },
        "UnitTestTemplateURL": {
          "default": "S3 URL of unit test template"
        },
        "VerifyTestTemplateURL": {
          "default": "S3 URL of verify test template"
        },
        "CoccinelleTemplateURL": {
          "default": "S3 URL of coccinelle test template"
        },
        "ClangTemplateURL": {
          "default": "S3 URL of Clang test template"
        },
        "RustTemplateURL": {
          "default": "S3 URL of rust test template"
        },
        "NotificationTemplateURL": {
          "default": "S3 URL of notification system template"
        },
        "PipelineName": {
          "default": "Name of the CodePipeline"
        },
        "SourceBucket": {
          "default": "S3 bucket that contains the source code for the pipeline"
        },
        "SourceBucketObjectKey": {
          "default": "Zip file containing source code inside Source Code Bucket"
        },
        "PipelineTemplateURL": {
          "default": "S3 URL for the pipeline template"
        }
      }
    }
  },
  "Parameters": {
    "token": {
      "Description": "Github Token",
      "Type": "String",
      "Default": "",
      "NoEcho": true
    },
    "UnitTestBuildSpecFileName": {
      "Description": "Filename of the Unittest buildspec",
      "AllowedPattern": "^[A-Za-z0-9/\\-_]+(\\.yml|\\.yaml)$",
      "ConstraintDescription": "Must be a yaml/yml file",
      "Type": "String"
    },
    "VerifyBuildSpecFileName": {
      "Description": "Filename of the Verifytest buildspec",
      "AllowedPattern": "^[A-Za-z0-9/\\-_]+(\\.yml|\\.yaml)$",
      "ConstraintDescription": "Must be a yaml/yml file",
      "Type": "String"
    },
    "CoccinelleBuildSpecFileName": {
      "Description": "Name of the Coccinelle buildspec",
      "AllowedPattern": "^[A-Za-z0-9/\\-_]+(\\.yml|\\.yaml)$",
      "ConstraintDescription": "Must be a yaml/yml file",
      "Type": "String"
    },
    "ClangBuildSpecFileName": {
      "Description": "name of the Clang buildspec",
      "AllowedPattern": "^[A-Za-z0-9/\\-_]+(\\.yml|\\.yaml)$",
      "ConstraintDescription": "Must be a yaml/yml file",
      "Type": "String"
    },
    "RustBuildSpecFileName": {
      "Description": "name of the rust buildspec",
      "AllowedPattern": "^[A-Za-z0-9/\\-_]+(\\.yml|\\.yaml)$",
      "ConstraintDescription": "Must be a yaml/yml file",
      "Type": "String"
    },
    "BuildImage": {
      "Description": "Docker container image for CodeBuild projects",
      "Type": "String"
    },
    "CoccinelleBuildImage": {
      "Description": "Docker container image for the Coccinelle CodeBuild project",
      "Type": "String"
    },
    "UnitTestTemplateURL": {
      "Description": "S3 URL for unit test template",
      "AllowedPattern": "^https://.*\\.s3\\..*\\.amazonaws\\.com/.*(\\.json|\\.yml|\\.yaml)$",
      "ConstraintDescription": "Must be a S3 virtual-hosted–style request URL to a file with .yaml/.yml or .json file extension",
      "Type": "String"
    },
    "VerifyTestTemplateURL": {
      "Description": "S3 URL for verify test template",
      "AllowedPattern": "^https://.*\\.s3\\..*\\.amazonaws\\.com/.*(\\.json|\\.yml|\\.yaml)$",
      "ConstraintDescription": "Must be a S3 virtual-hosted–style request URL to a file with .yaml/.yml or .json file extension",
      "Type": "String"
    },
    "CoccinelleTemplateURL": {
      "Description": "S3 URL for coccinelle test template",
      "AllowedPattern": "^https://.*\\.s3\\..*\\.amazonaws\\.com/.*(\\.json|\\.yml|\\.yaml)$",
      "ConstraintDescription": "Must be a S3 virtual-hosted–style request URL to a file with .yaml/.yml or .json file extension",
      "Type": "String"
    },
    "ClangTemplateURL": {
      "Description": "S3 URL for clang test template",
      "AllowedPattern": "^https://.*\\.s3\\..*\\.amazonaws\\.com/.*(\\.json|\\.yml|\\.yaml)$",
      "ConstraintDescription": "Must be a S3 virtual-hosted–style request URL to a file with .yaml/.yml or .json file extension",
      "Type": "String"
    },
    "RustTemplateURL": {
      "Description": "S3 URL for rust test template",
      "AllowedPattern": "^https://.*\\.s3\\..*\\.amazonaws\\.com/.*(\\.json|\\.yml|\\.yaml)$",
      "ConstraintDescription": "Must be a S3 virtual-hosted–style request URL to a file with .yaml/.yml or .json file extension",
      "Type": "String"
    },
    "NotificationTemplateURL": {
      "Description": "S3 URL for notification system template",
      "AllowedPattern": "^https://.*\\.s3\\..*\\.amazonaws\\.com/.*(\\.json|\\.yml|\\.yaml)$",
      "ConstraintDescription": "Must be a S3 virtual-hosted–style request URL to a file with .yaml/.yml or .json file extension",
      "Type": "String"
    },
    "PipelineName": {
      "Type": "String",
      "Description": "Name of the CodePipeline",
      "AllowedPattern": "[A-Za-z0-9.@\\-_]+",
      "ConstraintDescription": "Must contain only uppercase, lowercase, numbers, dash and underscore.",
      "MinLength": 1,
      "MaxLength": 100
    },
    "SourceBucket": {
      "Type": "String",
      "Description": "S3 bucket containing the source code for the pipeline"
    },
    "SourceBucketObjectKey": {
      "Type": "String",
      "AllowedPattern": "[A-Za-z0-9.@\\-_/]+.zip$",
      "ConstraintDescription": "Must contain only uppercase, lowercase, numbers, dash, underscore and end with a .zip extension",
      "Description": "Zip file containing source code inside Source Code Bucket"
    },
    "PipelineTemplateURL": {
      "Type": "String",
      "AllowedPattern": "^https://.*\\.s3\\..*\\.amazonaws\\.com/.*(\\.json|\\.yml|\\.yaml)$",
      "ConstraintDescription": "Must be a S3 virtual-hosted–style request URL to a file with .yaml/.yml or .json file extension",
      "Description": "S3 URL for the pipeline template"
    },
    "snsTopicName": {
      "Type": "String",
      "Description": "Name of sns topic"
    },
    "snsDisplayName": {
      "Type": "String",
      "Default": "Suricata Pipeline Notification System",
      "Description": "Display Name of sns topic"
    }
  },
  "Resources": {
    "TestingIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "s3",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::${PipelineName}-artifactstore/*"
                  }
                }
              ]
            }
          },
          {
            "PolicyName": "ecr",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:GetAuthorizationToken",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "cloudtrail:LookupEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "cloudwatch",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "cloudwatch:*",
                    "logs:*",
                    "sns:*"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "UnitTest": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "BuildName": {
            "Fn::Sub": "${PipelineName}-UnitTest"
          },
          "BuildImage": {
            "Ref": "BuildImage"
          },
          "BuildSpecFileName": {
            "Ref": "UnitTestBuildSpecFileName"
          },
          "IAMRole": {
            "Fn::GetAtt": [
              "TestingIamRole",
              "Arn"
            ]
          }
        },
        "TemplateURL": {
          "Ref": "UnitTestTemplateURL"
        }
      }
    },
    "Verify": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "BuildName": {
            "Fn::Sub": "${PipelineName}-VerifyTest"
          },
          "BuildImage": {
            "Ref": "BuildImage"
          },
          "BuildSpecFileName": {
            "Ref": "VerifyBuildSpecFileName"
          },
          "IAMRole": {
            "Fn::GetAtt": [
              "TestingIamRole",
              "Arn"
            ]
          }
        },
        "TemplateURL": {
          "Ref": "VerifyTestTemplateURL"
        }
      }
    },
    "Coccinelle": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "BuildName": {
            "Fn::Sub": "${PipelineName}-CoccinelleTest"
          },
          "BuildImage": {
            "Ref": "CoccinelleBuildImage"
          },
          "BuildSpecFileName": {
            "Ref": "CoccinelleBuildSpecFileName"
          },
          "IAMRole": {
            "Fn::GetAtt": [
              "TestingIamRole",
              "Arn"
            ]
          }
        },
        "TemplateURL": {
          "Ref": "CoccinelleTemplateURL"
        }
      }
    },
    "Clang": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "BuildName": {
            "Fn::Sub": "${PipelineName}-ClangTest"
          },
          "BuildImage": {
            "Ref": "BuildImage"
          },
          "BuildSpecFileName": {
            "Ref": "ClangBuildSpecFileName"
          },
          "IAMRole": {
            "Fn::GetAtt": [
              "TestingIamRole",
              "Arn"
            ]
          }
        },
        "TemplateURL": {
          "Ref": "ClangTemplateURL"
        }
      }
    },
    "Rust": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "BuildName": {
            "Fn::Sub": "${PipelineName}-RustTest"
          },
          "BuildImage": {
            "Ref": "BuildImage"
          },
          "BuildSpecFileName": {
            "Ref": "RustBuildSpecFileName"
          },
          "IAMRole": {
            "Fn::GetAtt": [
              "TestingIamRole",
              "Arn"
            ]
          }
        },
        "TemplateURL": {
          "Ref": "RustTemplateURL"
        }
      }
    },
    "NotificationSystem": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "token": {
            "Ref": "token"
          },
          "SourceBucket": {
            "Ref": "SourceBucket"
          },
          "SourceBucketObjectKey": {
            "Ref": "SourceBucketObjectKey"
          },
          "PipelineName": {
            "Ref": "PipelineName"
          }
        },
        "TemplateURL": {
          "Ref": "NotificationTemplateURL"
        }
      }
    },
    "pipeline": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "PipelineName": {
            "Ref": "PipelineName"
          },
          "SourceBucket": {
            "Ref": "SourceBucket"
          },
          "SourceBucketObjectKey": {
            "Ref": "SourceBucketObjectKey"
          },
          "UnitTestName": {
            "Fn::Sub": "${PipelineName}-UnitTest"
          },
          "VerifyTestName": {
            "Fn::Sub": "${PipelineName}-VerifyTest"
          },
          "CoccinelleTestName": {
            "Fn::Sub": "${PipelineName}-CoccinelleTest"
          },
          "RustTestName": {
            "Fn::Sub": "${PipelineName}-RustTest"
          },
          "ClangTestName": {
            "Fn::Sub": "${PipelineName}-ClangTest"
          },
          "snsTopicName": {
            "Ref": "snsTopicName"
          },
          "snsDisplayName": {
            "Ref": "snsDisplayName"
          },
          "notificationFunctionArn": {
            "Fn::GetAtt": [
              "NotificationSystem",
              "Outputs.notificationFunctionArn"
            ]
          }
        },
        "TemplateURL": {
          "Ref": "PipelineTemplateURL"
        }
      }
    },
    "DevOpsLogViewGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": {
          "Fn::Sub": "DevOpsLogViewGroup-${PipelineName}-${AWS::Region}"
        }
      }
    },
    "DevOpsLogViewPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": {
          "Fn::Sub": "ViewLogPolicy-${PipelineName}-${AWS::Region}"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "0",
              "Effect": "Allow",
              "Action": [
                "codepipeline:ListPipelineExecutions",
                "codepipeline:ListActionExecutions",
                "codepipeline:GetPipeline",
                "codebuild:ListBuildsForProject",
                "codepipeline:GetPipelineState",
                "codebuild:BatchGetBuilds",
                "codepipeline:GetPipelineExecution"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${PipelineName}-ClangTest"
                },
                {
                  "Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${PipelineName}-RustTest"
                },
                {
                  "Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${PipelineName}-CoccinelleTest"
                },
                {
                  "Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${PipelineName}-UnitTest"
                },
                {
                  "Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${PipelineName}-VerifyTest"
                },
                {
                  "Fn::Sub": "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${PipelineName}"
                }
              ]
            },
            {
              "Sid": "1",
              "Effect": "Allow",
              "Action": [
                "logs:GetLogRecord",
                "logs:GetLogEvents"
              ],
              "Resource": {
                "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              }
            },
            {
              "Sid": "2",
              "Effect": "Allow",
              "Action": [
                "codepipeline:ListPipelines"
              ],
              "Resource": {
                "Fn::Sub": "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:*"
              }
            }
          ]
        },
        "Groups": [
          {
            "Ref": "DevOpsLogViewGroup"
          }
        ]
      }
    }
  }
}


